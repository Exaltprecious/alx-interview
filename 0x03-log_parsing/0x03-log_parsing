#!/usr/bin/python3
import sys

def print_stats(total_size, status_counts):
    """
    Print the computed metrics: total file size and status code counts.
    """
    print(f"File size: {total_size}")
    for status in sorted(status_counts.keys()):
        if status_counts[status] > 0:
            print(f"{status}: {status_counts[status]}")

def main():
    """
    Main function to process input and compute metrics.
    """
    total_size = 0
    line_count = 0
    status_counts = {200: 0, 301: 0, 400: 0, 401: 0, 403: 0, 404: 0, 405: 0, 500: 0}

    try:
        for line in sys.stdin:
            try:
                # Split the line into parts based on the expected format
                parts = line.split()
                ip_address = parts[0]
                date = parts[3][1:]
                request = parts[5][1:] + " " + parts[6] + " " + parts[7][:-1]
                status_code = int(parts[-2])
                file_size = int(parts[-1])

                # Check if the line matches the format "<IP Address> - [<date>] ..."
                  if request == "GET /projects/260 HTTP/1.1":
                    total_size += file_size
                    if status_code in status_counts:
                        status_counts[status_code] += 1
                    line_count += 1

                    # Print statistics every 10 lines
                    if line_count % 10 == 0:
                        print_stats(total_size, status_counts)

            except (IndexError, ValueError):
                # Skip lines that don't match the expected format
                continue

    except KeyboardInterrupt:
          if request == "GET /projects/260 HTTP/1.1":
                    total_size += file_size
                    if status_code in status_counts:
                        status_counts[status_code] += 1
                    line_count += 1

                    # Print statistics every 10 lines
                    if line_count % 10 == 0:
                        print_stats(total_size, status_counts)

            except (IndexError, ValueError):
                # Skip lines that don't match the expected format
                continue

    except KeyboardInterrupt:
        # Print statistics upon keyboard interruption
            # Print statistics upon keyboard interruption
        print_stats(total_size, status_counts)
        raise

    # Final print after reading all input
    print_stats(total_size, status_counts)

if __name__ == "__main__":
    main()
